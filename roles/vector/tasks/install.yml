---

- name: Install vector from source
  when: vector_install_from_repo | bool
  block:
    # Workaround for latest version being named against a version number
    - name: Get latest version
      when: vector_version == "latest"
      ansible.builtin.uri:
        url: https://s3.amazonaws.com/packages.timber.io/?prefix=vector/latest&max-keys=1
        return_content: true
      register: bucket_content

    - name: Set latest version
      when: vector_version == "latest"
      ansible.builtin.set_fact:
        vector_version: "{{ bucket_content.content | regex_replace('.*\\n.*<Key>[^-]+-(?P<version>[\\d\\.]+)-.*', '\\g<version>') }}"

    - name: Install Vector (Debian)
      when: ansible_os_family == 'Debian'
      ansible.builtin.apt:
        deb: "https://packages.timber.io/vector/{{ version }}/vector-{{ version }}-{{ arch }}.deb"
        install_recommends: true
      notify: Restart vector
      vars:
        version: "{{ (vector_version == 'nightly') | bool | ternary('nightly/latest', vector_version) }}"
        arch: "{{ vectort_arch[ansible_machine] }}"

    - name: Install Vector (RedHat)
      when: ansible_os_family == 'RedHat'
      ansible.builtin.yum:
        name: "https://packages.timber.io/vector/{{ version }}/vector-{{ package_version }}.{{ arch }}.rpm"
        state: present
        disable_gpg_check: true # package is not signed
      notify: Restart vector
      vars:
        version: "{{ (vector_version == 'nightly') | bool | ternary('nightly/latest', vector_version) }}"
        package_version: "{{ vector_version is match('latest') | ternary(vector_version, vector_version ~ '-1') }}"
        arch: "{{ vectort_arch[ansible_machine] }}"

- name: Install vector from repository
  when: vector_install_from_repo | bool
  block:
    - name: Install vector
      ansible.builtin.package:
        name: "{{ vector_package }}"
        state: present
